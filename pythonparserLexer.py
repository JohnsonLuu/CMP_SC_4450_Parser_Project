# Generated from .\pythonparser.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,216,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,
        1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,
        1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,
        1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,16,
        1,16,3,16,114,8,16,1,16,1,16,1,16,5,16,119,8,16,10,16,12,16,122,
        9,16,1,17,3,17,125,8,17,1,17,4,17,128,8,17,11,17,12,17,129,1,18,
        1,18,5,18,134,8,18,10,18,12,18,137,9,18,1,18,1,18,1,19,1,19,1,20,
        1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,154,8,21,
        1,22,1,22,1,23,1,23,3,23,160,8,23,1,23,3,23,163,8,23,1,23,1,23,3,
        23,167,8,23,1,23,1,23,3,23,171,8,23,1,23,3,23,174,8,23,1,23,1,23,
        3,23,178,8,23,1,23,1,23,3,23,182,8,23,5,23,184,8,23,10,23,12,23,
        187,9,23,1,24,1,24,5,24,191,8,24,10,24,12,24,194,9,24,1,24,1,24,
        1,25,4,25,199,8,25,11,25,12,25,200,1,25,1,25,1,26,1,26,1,26,1,26,
        1,26,1,26,1,26,1,26,1,26,1,26,3,26,215,8,26,0,0,27,1,1,3,2,5,3,7,
        4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
        16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,
        27,1,0,5,1,0,10,10,1,0,48,57,2,0,65,90,97,122,4,0,37,37,42,43,45,
        45,47,47,3,0,9,10,13,13,32,32,241,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
        0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,1,55,1,0,
        0,0,3,59,1,0,0,0,5,62,1,0,0,0,7,66,1,0,0,0,9,69,1,0,0,0,11,71,1,
        0,0,0,13,73,1,0,0,0,15,75,1,0,0,0,17,80,1,0,0,0,19,85,1,0,0,0,21,
        91,1,0,0,0,23,93,1,0,0,0,25,95,1,0,0,0,27,99,1,0,0,0,29,102,1,0,
        0,0,31,109,1,0,0,0,33,113,1,0,0,0,35,124,1,0,0,0,37,131,1,0,0,0,
        39,140,1,0,0,0,41,142,1,0,0,0,43,153,1,0,0,0,45,155,1,0,0,0,47,159,
        1,0,0,0,49,188,1,0,0,0,51,198,1,0,0,0,53,214,1,0,0,0,55,56,5,97,
        0,0,56,57,5,110,0,0,57,58,5,100,0,0,58,2,1,0,0,0,59,60,5,111,0,0,
        60,61,5,114,0,0,61,4,1,0,0,0,62,63,5,110,0,0,63,64,5,111,0,0,64,
        65,5,116,0,0,65,6,1,0,0,0,66,67,5,105,0,0,67,68,5,102,0,0,68,8,1,
        0,0,0,69,70,5,40,0,0,70,10,1,0,0,0,71,72,5,41,0,0,72,12,1,0,0,0,
        73,74,5,58,0,0,74,14,1,0,0,0,75,76,5,101,0,0,76,77,5,108,0,0,77,
        78,5,105,0,0,78,79,5,102,0,0,79,16,1,0,0,0,80,81,5,101,0,0,81,82,
        5,108,0,0,82,83,5,115,0,0,83,84,5,101,0,0,84,18,1,0,0,0,85,86,5,
        119,0,0,86,87,5,104,0,0,87,88,5,105,0,0,88,89,5,108,0,0,89,90,5,
        101,0,0,90,20,1,0,0,0,91,92,5,35,0,0,92,22,1,0,0,0,93,94,5,10,0,
        0,94,24,1,0,0,0,95,96,5,102,0,0,96,97,5,111,0,0,97,98,5,114,0,0,
        98,26,1,0,0,0,99,100,5,105,0,0,100,101,5,110,0,0,101,28,1,0,0,0,
        102,103,5,114,0,0,103,104,5,97,0,0,104,105,5,110,0,0,105,106,5,103,
        0,0,106,107,5,101,0,0,107,108,5,40,0,0,108,30,1,0,0,0,109,110,5,
        44,0,0,110,32,1,0,0,0,111,114,3,41,20,0,112,114,5,95,0,0,113,111,
        1,0,0,0,113,112,1,0,0,0,114,120,1,0,0,0,115,119,3,41,20,0,116,119,
        5,95,0,0,117,119,3,39,19,0,118,115,1,0,0,0,118,116,1,0,0,0,118,117,
        1,0,0,0,119,122,1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,34,1,
        0,0,0,122,120,1,0,0,0,123,125,5,45,0,0,124,123,1,0,0,0,124,125,1,
        0,0,0,125,127,1,0,0,0,126,128,3,39,19,0,127,126,1,0,0,0,128,129,
        1,0,0,0,129,127,1,0,0,0,129,130,1,0,0,0,130,36,1,0,0,0,131,135,5,
        34,0,0,132,134,8,0,0,0,133,132,1,0,0,0,134,137,1,0,0,0,135,133,1,
        0,0,0,135,136,1,0,0,0,136,138,1,0,0,0,137,135,1,0,0,0,138,139,5,
        34,0,0,139,38,1,0,0,0,140,141,7,1,0,0,141,40,1,0,0,0,142,143,7,2,
        0,0,143,42,1,0,0,0,144,154,5,61,0,0,145,146,5,43,0,0,146,154,5,61,
        0,0,147,148,5,45,0,0,148,154,5,61,0,0,149,150,5,42,0,0,150,154,5,
        61,0,0,151,152,5,47,0,0,152,154,5,61,0,0,153,144,1,0,0,0,153,145,
        1,0,0,0,153,147,1,0,0,0,153,149,1,0,0,0,153,151,1,0,0,0,154,44,1,
        0,0,0,155,156,7,3,0,0,156,46,1,0,0,0,157,160,3,35,17,0,158,160,3,
        33,16,0,159,157,1,0,0,0,159,158,1,0,0,0,160,162,1,0,0,0,161,163,
        5,32,0,0,162,161,1,0,0,0,162,163,1,0,0,0,163,164,1,0,0,0,164,166,
        3,45,22,0,165,167,5,32,0,0,166,165,1,0,0,0,166,167,1,0,0,0,167,170,
        1,0,0,0,168,171,3,35,17,0,169,171,3,33,16,0,170,168,1,0,0,0,170,
        169,1,0,0,0,171,185,1,0,0,0,172,174,5,32,0,0,173,172,1,0,0,0,173,
        174,1,0,0,0,174,175,1,0,0,0,175,177,3,45,22,0,176,178,5,32,0,0,177,
        176,1,0,0,0,177,178,1,0,0,0,178,181,1,0,0,0,179,182,3,35,17,0,180,
        182,3,33,16,0,181,179,1,0,0,0,181,180,1,0,0,0,182,184,1,0,0,0,183,
        173,1,0,0,0,184,187,1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,
        48,1,0,0,0,187,185,1,0,0,0,188,192,5,10,0,0,189,191,5,32,0,0,190,
        189,1,0,0,0,191,194,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,
        195,1,0,0,0,194,192,1,0,0,0,195,196,6,24,0,0,196,50,1,0,0,0,197,
        199,7,4,0,0,198,197,1,0,0,0,199,200,1,0,0,0,200,198,1,0,0,0,200,
        201,1,0,0,0,201,202,1,0,0,0,202,203,6,25,0,0,203,52,1,0,0,0,204,
        215,5,60,0,0,205,206,5,60,0,0,206,215,5,61,0,0,207,215,5,62,0,0,
        208,209,5,62,0,0,209,215,5,61,0,0,210,211,5,61,0,0,211,215,5,61,
        0,0,212,213,5,33,0,0,213,215,5,61,0,0,214,204,1,0,0,0,214,205,1,
        0,0,0,214,207,1,0,0,0,214,208,1,0,0,0,214,210,1,0,0,0,214,212,1,
        0,0,0,215,54,1,0,0,0,19,0,113,118,120,124,129,135,153,159,162,166,
        170,173,177,181,185,192,200,214,1,6,0,0
    ]

class pythonparserLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    VAR = 17
    NUMBER = 18
    STRING = 19
    DIGIT = 20
    LETTER = 21
    ASSIGNMENT_OPERATORS = 22
    ARITHMETIC_OPERATORS = 23
    ARITHMETIC_FUNCTIONS = 24
    NEWLINE = 25
    WHITE_SPACE = 26
    CONDITIONAL_OPERATORS = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'and'", "'or'", "'not'", "'if'", "'('", "')'", "':'", "'elif'", 
            "'else'", "'while'", "'#'", "'\\n'", "'for'", "'in'", "'range('", 
            "','" ]

    symbolicNames = [ "<INVALID>",
            "VAR", "NUMBER", "STRING", "DIGIT", "LETTER", "ASSIGNMENT_OPERATORS", 
            "ARITHMETIC_OPERATORS", "ARITHMETIC_FUNCTIONS", "NEWLINE", "WHITE_SPACE", 
            "CONDITIONAL_OPERATORS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "VAR", "NUMBER", "STRING", "DIGIT", 
                  "LETTER", "ASSIGNMENT_OPERATORS", "ARITHMETIC_OPERATORS", 
                  "ARITHMETIC_FUNCTIONS", "NEWLINE", "WHITE_SPACE", "CONDITIONAL_OPERATORS" ]

    grammarFileName = "pythonparser.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


