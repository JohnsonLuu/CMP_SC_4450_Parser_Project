# Generated from pythonparser.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,20,176,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,
        4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,
        9,3,9,74,8,9,1,9,1,9,1,9,5,9,79,8,9,10,9,12,9,82,9,9,1,10,3,10,85,
        8,10,1,10,4,10,88,8,10,11,10,12,10,89,1,11,1,11,5,11,94,8,11,10,
        11,12,11,97,9,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,
        14,1,14,1,14,1,14,1,14,1,14,3,14,114,8,14,1,15,1,15,1,16,1,16,3,
        16,120,8,16,1,16,3,16,123,8,16,1,16,1,16,3,16,127,8,16,1,16,1,16,
        3,16,131,8,16,1,16,3,16,134,8,16,1,16,1,16,3,16,138,8,16,1,16,1,
        16,3,16,142,8,16,5,16,144,8,16,10,16,12,16,147,9,16,1,17,1,17,5,
        17,151,8,17,10,17,12,17,154,9,17,1,17,1,17,1,18,4,18,159,8,18,11,
        18,12,18,160,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
        19,1,19,3,19,175,8,19,0,0,20,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
        17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
        39,20,1,0,5,1,0,10,10,1,0,48,57,2,0,65,90,97,122,4,0,37,37,42,43,
        45,45,47,47,3,0,9,10,13,13,32,32,201,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
        1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
        0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
        0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
        0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,1,41,1,0,0,0,3,45,1,0,0,0,5,48,1,
        0,0,0,7,52,1,0,0,0,9,55,1,0,0,0,11,57,1,0,0,0,13,59,1,0,0,0,15,61,
        1,0,0,0,17,66,1,0,0,0,19,73,1,0,0,0,21,84,1,0,0,0,23,91,1,0,0,0,
        25,100,1,0,0,0,27,102,1,0,0,0,29,113,1,0,0,0,31,115,1,0,0,0,33,119,
        1,0,0,0,35,148,1,0,0,0,37,158,1,0,0,0,39,174,1,0,0,0,41,42,5,97,
        0,0,42,43,5,110,0,0,43,44,5,100,0,0,44,2,1,0,0,0,45,46,5,111,0,0,
        46,47,5,114,0,0,47,4,1,0,0,0,48,49,5,110,0,0,49,50,5,111,0,0,50,
        51,5,116,0,0,51,6,1,0,0,0,52,53,5,105,0,0,53,54,5,102,0,0,54,8,1,
        0,0,0,55,56,5,40,0,0,56,10,1,0,0,0,57,58,5,41,0,0,58,12,1,0,0,0,
        59,60,5,58,0,0,60,14,1,0,0,0,61,62,5,101,0,0,62,63,5,108,0,0,63,
        64,5,105,0,0,64,65,5,102,0,0,65,16,1,0,0,0,66,67,5,101,0,0,67,68,
        5,108,0,0,68,69,5,115,0,0,69,70,5,101,0,0,70,18,1,0,0,0,71,74,3,
        27,13,0,72,74,5,95,0,0,73,71,1,0,0,0,73,72,1,0,0,0,74,80,1,0,0,0,
        75,79,3,27,13,0,76,79,5,95,0,0,77,79,3,25,12,0,78,75,1,0,0,0,78,
        76,1,0,0,0,78,77,1,0,0,0,79,82,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,
        0,81,20,1,0,0,0,82,80,1,0,0,0,83,85,5,45,0,0,84,83,1,0,0,0,84,85,
        1,0,0,0,85,87,1,0,0,0,86,88,3,25,12,0,87,86,1,0,0,0,88,89,1,0,0,
        0,89,87,1,0,0,0,89,90,1,0,0,0,90,22,1,0,0,0,91,95,5,34,0,0,92,94,
        8,0,0,0,93,92,1,0,0,0,94,97,1,0,0,0,95,93,1,0,0,0,95,96,1,0,0,0,
        96,98,1,0,0,0,97,95,1,0,0,0,98,99,5,34,0,0,99,24,1,0,0,0,100,101,
        7,1,0,0,101,26,1,0,0,0,102,103,7,2,0,0,103,28,1,0,0,0,104,114,5,
        61,0,0,105,106,5,43,0,0,106,114,5,61,0,0,107,108,5,45,0,0,108,114,
        5,61,0,0,109,110,5,42,0,0,110,114,5,61,0,0,111,112,5,47,0,0,112,
        114,5,61,0,0,113,104,1,0,0,0,113,105,1,0,0,0,113,107,1,0,0,0,113,
        109,1,0,0,0,113,111,1,0,0,0,114,30,1,0,0,0,115,116,7,3,0,0,116,32,
        1,0,0,0,117,120,3,21,10,0,118,120,3,19,9,0,119,117,1,0,0,0,119,118,
        1,0,0,0,120,122,1,0,0,0,121,123,5,32,0,0,122,121,1,0,0,0,122,123,
        1,0,0,0,123,124,1,0,0,0,124,126,3,31,15,0,125,127,5,32,0,0,126,125,
        1,0,0,0,126,127,1,0,0,0,127,130,1,0,0,0,128,131,3,21,10,0,129,131,
        3,19,9,0,130,128,1,0,0,0,130,129,1,0,0,0,131,145,1,0,0,0,132,134,
        5,32,0,0,133,132,1,0,0,0,133,134,1,0,0,0,134,135,1,0,0,0,135,137,
        3,31,15,0,136,138,5,32,0,0,137,136,1,0,0,0,137,138,1,0,0,0,138,141,
        1,0,0,0,139,142,3,21,10,0,140,142,3,19,9,0,141,139,1,0,0,0,141,140,
        1,0,0,0,142,144,1,0,0,0,143,133,1,0,0,0,144,147,1,0,0,0,145,143,
        1,0,0,0,145,146,1,0,0,0,146,34,1,0,0,0,147,145,1,0,0,0,148,152,5,
        10,0,0,149,151,5,32,0,0,150,149,1,0,0,0,151,154,1,0,0,0,152,150,
        1,0,0,0,152,153,1,0,0,0,153,155,1,0,0,0,154,152,1,0,0,0,155,156,
        6,17,0,0,156,36,1,0,0,0,157,159,7,4,0,0,158,157,1,0,0,0,159,160,
        1,0,0,0,160,158,1,0,0,0,160,161,1,0,0,0,161,162,1,0,0,0,162,163,
        6,18,0,0,163,38,1,0,0,0,164,175,5,60,0,0,165,166,5,60,0,0,166,175,
        5,61,0,0,167,175,5,62,0,0,168,169,5,62,0,0,169,175,5,61,0,0,170,
        171,5,61,0,0,171,175,5,61,0,0,172,173,5,33,0,0,173,175,5,61,0,0,
        174,164,1,0,0,0,174,165,1,0,0,0,174,167,1,0,0,0,174,168,1,0,0,0,
        174,170,1,0,0,0,174,172,1,0,0,0,175,40,1,0,0,0,19,0,73,78,80,84,
        89,95,113,119,122,126,130,133,137,141,145,152,160,174,1,6,0,0
    ]

class pythonparserLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    VAR = 10
    NUMBER = 11
    STRING = 12
    DIGIT = 13
    LETTER = 14
    ASSIGNMENT_OPERATORS = 15
    ARITHMETIC_OPERATORS = 16
    ARITHMETIC_FUNCTIONS = 17
    NEWLINE = 18
    WHITE_SPACE = 19
    CONDITIONAL_OPERATORS = 20

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'and'", "'or'", "'not'", "'if'", "'('", "')'", "':'", "'elif'", 
            "'else'" ]

    symbolicNames = [ "<INVALID>",
            "VAR", "NUMBER", "STRING", "DIGIT", "LETTER", "ASSIGNMENT_OPERATORS", 
            "ARITHMETIC_OPERATORS", "ARITHMETIC_FUNCTIONS", "NEWLINE", "WHITE_SPACE", 
            "CONDITIONAL_OPERATORS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "VAR", "NUMBER", "STRING", "DIGIT", "LETTER", 
                  "ASSIGNMENT_OPERATORS", "ARITHMETIC_OPERATORS", "ARITHMETIC_FUNCTIONS", 
                  "NEWLINE", "WHITE_SPACE", "CONDITIONAL_OPERATORS" ]

    grammarFileName = "pythonparser.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


