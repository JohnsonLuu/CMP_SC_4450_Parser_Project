# Generated from pythonparser.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,21,184,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,
        1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,
        1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,3,10,82,8,10,1,10,1,10,1,10,
        5,10,87,8,10,10,10,12,10,90,9,10,1,11,3,11,93,8,11,1,11,4,11,96,
        8,11,11,11,12,11,97,1,12,1,12,5,12,102,8,12,10,12,12,12,105,9,12,
        1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,3,15,122,8,15,1,16,1,16,1,17,1,17,3,17,128,8,17,1,17,3,
        17,131,8,17,1,17,1,17,3,17,135,8,17,1,17,1,17,3,17,139,8,17,1,17,
        3,17,142,8,17,1,17,1,17,3,17,146,8,17,1,17,1,17,3,17,150,8,17,5,
        17,152,8,17,10,17,12,17,155,9,17,1,18,1,18,5,18,159,8,18,10,18,12,
        18,162,9,18,1,18,1,18,1,19,4,19,167,8,19,11,19,12,19,168,1,19,1,
        19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,183,8,
        20,0,0,21,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,1,0,5,1,
        0,10,10,1,0,48,57,2,0,65,90,97,122,4,0,37,37,42,43,45,45,47,47,3,
        0,9,10,13,13,32,32,209,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
        0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
        0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
        0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,
        0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,1,43,1,0,0,0,3,47,1,0,0,0,5,50,1,
        0,0,0,7,54,1,0,0,0,9,57,1,0,0,0,11,59,1,0,0,0,13,61,1,0,0,0,15,63,
        1,0,0,0,17,68,1,0,0,0,19,73,1,0,0,0,21,81,1,0,0,0,23,92,1,0,0,0,
        25,99,1,0,0,0,27,108,1,0,0,0,29,110,1,0,0,0,31,121,1,0,0,0,33,123,
        1,0,0,0,35,127,1,0,0,0,37,156,1,0,0,0,39,166,1,0,0,0,41,182,1,0,
        0,0,43,44,5,97,0,0,44,45,5,110,0,0,45,46,5,100,0,0,46,2,1,0,0,0,
        47,48,5,111,0,0,48,49,5,114,0,0,49,4,1,0,0,0,50,51,5,110,0,0,51,
        52,5,111,0,0,52,53,5,116,0,0,53,6,1,0,0,0,54,55,5,105,0,0,55,56,
        5,102,0,0,56,8,1,0,0,0,57,58,5,40,0,0,58,10,1,0,0,0,59,60,5,41,0,
        0,60,12,1,0,0,0,61,62,5,58,0,0,62,14,1,0,0,0,63,64,5,101,0,0,64,
        65,5,108,0,0,65,66,5,105,0,0,66,67,5,102,0,0,67,16,1,0,0,0,68,69,
        5,101,0,0,69,70,5,108,0,0,70,71,5,115,0,0,71,72,5,101,0,0,72,18,
        1,0,0,0,73,74,5,119,0,0,74,75,5,104,0,0,75,76,5,105,0,0,76,77,5,
        108,0,0,77,78,5,101,0,0,78,20,1,0,0,0,79,82,3,29,14,0,80,82,5,95,
        0,0,81,79,1,0,0,0,81,80,1,0,0,0,82,88,1,0,0,0,83,87,3,29,14,0,84,
        87,5,95,0,0,85,87,3,27,13,0,86,83,1,0,0,0,86,84,1,0,0,0,86,85,1,
        0,0,0,87,90,1,0,0,0,88,86,1,0,0,0,88,89,1,0,0,0,89,22,1,0,0,0,90,
        88,1,0,0,0,91,93,5,45,0,0,92,91,1,0,0,0,92,93,1,0,0,0,93,95,1,0,
        0,0,94,96,3,27,13,0,95,94,1,0,0,0,96,97,1,0,0,0,97,95,1,0,0,0,97,
        98,1,0,0,0,98,24,1,0,0,0,99,103,5,34,0,0,100,102,8,0,0,0,101,100,
        1,0,0,0,102,105,1,0,0,0,103,101,1,0,0,0,103,104,1,0,0,0,104,106,
        1,0,0,0,105,103,1,0,0,0,106,107,5,34,0,0,107,26,1,0,0,0,108,109,
        7,1,0,0,109,28,1,0,0,0,110,111,7,2,0,0,111,30,1,0,0,0,112,122,5,
        61,0,0,113,114,5,43,0,0,114,122,5,61,0,0,115,116,5,45,0,0,116,122,
        5,61,0,0,117,118,5,42,0,0,118,122,5,61,0,0,119,120,5,47,0,0,120,
        122,5,61,0,0,121,112,1,0,0,0,121,113,1,0,0,0,121,115,1,0,0,0,121,
        117,1,0,0,0,121,119,1,0,0,0,122,32,1,0,0,0,123,124,7,3,0,0,124,34,
        1,0,0,0,125,128,3,23,11,0,126,128,3,21,10,0,127,125,1,0,0,0,127,
        126,1,0,0,0,128,130,1,0,0,0,129,131,5,32,0,0,130,129,1,0,0,0,130,
        131,1,0,0,0,131,132,1,0,0,0,132,134,3,33,16,0,133,135,5,32,0,0,134,
        133,1,0,0,0,134,135,1,0,0,0,135,138,1,0,0,0,136,139,3,23,11,0,137,
        139,3,21,10,0,138,136,1,0,0,0,138,137,1,0,0,0,139,153,1,0,0,0,140,
        142,5,32,0,0,141,140,1,0,0,0,141,142,1,0,0,0,142,143,1,0,0,0,143,
        145,3,33,16,0,144,146,5,32,0,0,145,144,1,0,0,0,145,146,1,0,0,0,146,
        149,1,0,0,0,147,150,3,23,11,0,148,150,3,21,10,0,149,147,1,0,0,0,
        149,148,1,0,0,0,150,152,1,0,0,0,151,141,1,0,0,0,152,155,1,0,0,0,
        153,151,1,0,0,0,153,154,1,0,0,0,154,36,1,0,0,0,155,153,1,0,0,0,156,
        160,5,10,0,0,157,159,5,32,0,0,158,157,1,0,0,0,159,162,1,0,0,0,160,
        158,1,0,0,0,160,161,1,0,0,0,161,163,1,0,0,0,162,160,1,0,0,0,163,
        164,6,18,0,0,164,38,1,0,0,0,165,167,7,4,0,0,166,165,1,0,0,0,167,
        168,1,0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,170,1,0,0,0,170,
        171,6,19,0,0,171,40,1,0,0,0,172,183,5,60,0,0,173,174,5,60,0,0,174,
        183,5,61,0,0,175,183,5,62,0,0,176,177,5,62,0,0,177,183,5,61,0,0,
        178,179,5,61,0,0,179,183,5,61,0,0,180,181,5,33,0,0,181,183,5,61,
        0,0,182,172,1,0,0,0,182,173,1,0,0,0,182,175,1,0,0,0,182,176,1,0,
        0,0,182,178,1,0,0,0,182,180,1,0,0,0,183,42,1,0,0,0,19,0,81,86,88,
        92,97,103,121,127,130,134,138,141,145,149,153,160,168,182,1,6,0,
        0
    ]

class pythonparserLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    VAR = 11
    NUMBER = 12
    STRING = 13
    DIGIT = 14
    LETTER = 15
    ASSIGNMENT_OPERATORS = 16
    ARITHMETIC_OPERATORS = 17
    ARITHMETIC_FUNCTIONS = 18
    NEWLINE = 19
    WHITE_SPACE = 20
    CONDITIONAL_OPERATORS = 21

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'and'", "'or'", "'not'", "'if'", "'('", "')'", "':'", "'elif'", 
            "'else'", "'while'" ]

    symbolicNames = [ "<INVALID>",
            "VAR", "NUMBER", "STRING", "DIGIT", "LETTER", "ASSIGNMENT_OPERATORS", 
            "ARITHMETIC_OPERATORS", "ARITHMETIC_FUNCTIONS", "NEWLINE", "WHITE_SPACE", 
            "CONDITIONAL_OPERATORS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "VAR", "NUMBER", "STRING", "DIGIT", 
                  "LETTER", "ASSIGNMENT_OPERATORS", "ARITHMETIC_OPERATORS", 
                  "ARITHMETIC_FUNCTIONS", "NEWLINE", "WHITE_SPACE", "CONDITIONAL_OPERATORS" ]

    grammarFileName = "pythonparser.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


